Medium
Topics
Companies
You are given an m x n grid rooms initialized with these three possible values.

-1 A wall or an obstacle.
0 A gate.
INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

 

Example 1:


Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]
Example 2:

Input: rooms = [[-1]]
Output: [[-1]]
 

Constraints:

m == rooms.length
n == rooms[i].length
1 <= m, n <= 250
rooms[i][j] is -1, 0, or 231 - 1.


Solution:
import collections

class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        emptyRoom = 2147483647
        wall = -1
        gate = 0
        dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]]

        m = len(rooms)
        n = len(rooms[0])
        q = collections.deque()
        for i in range(m):
            for j in range(n):
                if rooms[i][j] == gate:
                    q.append([i, j])

        distance = 0
        while q:
            size = len(q)
            distance += 1
            while size > 0:
                size -= 1
                room = q.popleft()
                x, y = room
                for dx, dy in dirs:
                    i, j = x + dx, y + dy
                    if 0 <= i < m and 0 <= j < n and rooms[i][j] == emptyRoom:
                        rooms[i][j] = distance
                        q.append([i, j])
